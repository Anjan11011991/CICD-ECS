name: Deploy Dockerized Application

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment (prod, stage)'
        required: true
        default: 'stage'
      branch:
        description: 'Branch to deploy from'
        required: true
        default: 'main'  

jobs:
  deploy:
    runs-on: [self-hosted, windows]

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Build Docker image
        run: |
          docker build -t hello-world-python .

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }} 
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Tag and Push Docker image to Amazon ECR
        run: |
          docker tag hello-world-python:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/hello-world-python:latest
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/hello-world-python:latest
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}  
          AWS_REGION: ${{ secrets.AWS_REGION }}  
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Update ECS service
        run: |
          if (${{ github.event.inputs.environment }} -eq "prod") {
              $CLUSTER = "${{ secrets.AWS_PROD_CLUSTER }}"
              $SERVICE = "${{ secrets.AWS_PROD_SERVICE }}"
          } else {
              $CLUSTER = "${{ secrets.AWS_STAGE_CLUSTER }}"
              $SERVICE = "${{ secrets.AWS_STAGE_SERVICE }}"
          }

          # Debugging output
          Write-Host "Using cluster: $CLUSTER"
          Write-Host "Using service: $SERVICE"

          aws ecs update-service `
              --cluster $CLUSTER `
              --service $SERVICE `
              --force-new-deployment ` 
              --region "${{ secrets.AWS_REGION }}"
        shell: pwsh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
