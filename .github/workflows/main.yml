name: Build and Deploy Dockerized App

on:
  push:
    branches:
      - main  # Adjust to your target branch
  workflow_dispatch:
    inputs:
      environment:
        description: 'Select the environment to deploy to'
        required: true
        default: 'stage'
        type: choice
        options:
          - stage
          - prod

jobs:
  deploy:
    runs-on: [self-hosted, windows]
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Build Docker image
        run: |
          docker build -t hello-world-python .

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }} 
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Tag and Push Docker image to Amazon ECR
        run: |
          docker tag hello-world-python:latest ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/hello-world-python:${{ github.event.inputs.environment }}
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/hello-world-python:${{ github.event.inputs.environment }}
        env:
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}  
          AWS_REGION: ${{ secrets.AWS_REGION }}  
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Update ECS service
        run: |
          if ("${{ github.event.inputs.environment }}" -eq "prod") {
              aws ecs update-service `
                --cluster ${{ secrets.ECS_CLUSTER_PROD }} `
                --service ${{ secrets.ECS_SERVICE_PROD }} `
                --force-new-deployment `
                --region ${{ secrets.AWS_REGION }}
          } else {
              aws ecs update-service `
                --cluster ${{ secrets.ECS_CLUSTER_STAGING }} `
                --service ${{ secrets.ECS_SERVICE_STAGING }} `
                --force-new-deployment `
                --region ${{ secrets.AWS_REGION }}
          }
        shell: pwsh
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
